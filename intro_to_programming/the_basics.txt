##################
ANKI

Literals
  - any notation that lets you represent a fixed value in source code
  - string, integer, float, boolean, hash, array, symbol, nil


#####################
Strings
  - represented with single or double quotes
  - differences between single and double quotes
   * using single quotes within string use double quotes
      "The man said, 'Hi there!'"
    or use escaping (backslash is an escape character that tells ruby that the quote following is not ruby syntax just text)
      'The man said, \'Hi there!\''
   * double quotes required for string interpolation
   
##########################
Symbols
  - symbols are created by placeing a colon before the word
   * used to reference something you don't plan to print to screen or change
   * often refered to as immutable (not technically correct, but good enough for now)


#############################
Numbers

integer
  - represents whole numbers only
  
float
  - contains the decimal point
  
##########################\
nil
  - how we express nothing in ruby
  - check if something is nil
  .nil?
  
  - nil is treated as false, represents absence of content
  - false does not equal nil
   * although they both treated as negative in the boolean, they are not equal

########################3
Operations

addition 1+1
subtraction 1-3
multiplication 2*3
devision 2/3
  2/3 = 0 because both are integers
  2.0/3 = .666 because one of them is a float

modulo operator %
  - not strictly the remainder operator
  - quotient % modulus
  - returns remainder when working with positive integers

.remainder(num)
  where num is the number you are deviding by

.divmod(num)
  returns array of devision and modulo value

Effect of differenc between modulo and remainder is when working with negative integers in either the first, second or both operators
  - modulo is only negative if second operator is negative
  - remainder is only negative if the first operator is negative
  
some languages use % to mean remainder, not modulo value

!! try to work with positive integers exclusively when you need the remainder/modulo
otherwise make sure you know exactly which operator or method you need when working with negative integers

equality ==
  works with strings and numbers
  "4" == 4 > false because two different types
  
string concatenation
  + operator to join two strings together
  doesn't work when trying to add a string and number
  
  
#######################################33
type conversion
.to_i ~ convert to integer
.to_f ~ convert to float
.to_s ~ convert to string


######################################3
Basic Data Structures

-------------
Arrays
  - used to organize data into an ordered list
  - can include strings, integers, floats, booleans, or any other data type
  - denoted by [] square brackets
  - separated by commas
  
Access array using index
  - numbers start at 0
  
------------------
Hashes
  - sometimes reffered to as a dictionary
  - sets of key-value pairs
  - represented with {} curly braces
  - keys are usually symbols point to a value using hash rocket => of any data type
  

################
Expressions and Returns
  - => followed by what the expression returned
  - an expression in ruby always returns something even if it is an error message or nil

########################
Puts vs returns
  - puts prints to screen but still returns nil
  - the value returned isn't the same as the action performed
  
what does this return?
a = puts "stuff"
puts a


nil because a, the return of a print statement is nil

